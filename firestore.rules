rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isParticipant(conversationId) {
      return request.auth != null && 
             get(/databases/$(database)/documents/conversations/$(conversationId))
             .data.participants.hasAny([request.auth.uid]);
    }

    function isProvider() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isProvider == true;
    }

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Services Collection
    match /services/{serviceId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && isAdmin();
    }

    // Provider Requests Collection
    match /provider_requests/{userId} {
      allow read: if request.auth != null && (
        request.auth.uid == userId ||
        isAdmin()
      );
      
      allow create: if request.auth != null && 
        request.auth.uid == userId &&
        request.resource.data.keys().hasAll([
          'userId', 'services', 'experiences', 'certifications',
          'certificationFiles', 'workingArea', 'rateRange', 'bio',
          'idCardUrl', 'professionalPhone', 'professionalEmail',
          'professionalAddress', 'isVerified', 'submissionDate', 'status'
        ]) &&
        request.resource.data.isVerified == false &&
        request.resource.data.status == 'pending';

      allow update: if request.auth != null && (
        (request.auth.uid == userId &&
         request.resource.data.diff(resource.data).affectedKeys()
           .hasNone(['isVerified', 'status', 'reviewedAt', 'reviewedBy', 'rejectionReason'])) ||
        (isAdmin() && 
         request.resource.data.keys().hasAll(['userId', 'services', 'experiences', 'certifications',
          'certificationFiles', 'workingArea', 'rateRange', 'bio', 'idCardUrl', 'professionalPhone', 
          'professionalEmail', 'professionalAddress', 'isVerified', 'submissionDate', 'status', 
          'reviewedAt', 'reviewedBy']) &&
         (request.resource.data.status == 'rejected' ? 
           request.resource.data.keys().hasAll(['rejectionReason']) : true))
      );

      allow delete: if request.auth != null && (
        request.auth.uid == userId ||
        isAdmin()
      );

      match /notifications/{notificationId} {
        allow read: if request.auth != null && (
          request.auth.uid == userId ||
          isAdmin()
        );
        
        allow create: if request.auth != null && (
          isAdmin() ||
          (request.auth.uid == userId && 
           request.resource.data.keys().hasAll(['title', 'body', 'type', 'timestamp', 'read']))
        );
        
        allow update: if request.auth != null && (
          request.auth.uid == userId ||
          isAdmin()
        );
        
        allow delete: if request.auth != null && (
          request.auth.uid == userId ||
          isAdmin()
        );
      }

      match /admin_notes/{noteId} {
        allow read: if request.auth != null && isAdmin();
        allow create, update, delete: if request.auth != null && isAdmin();
      }
    }

    // Conversations Collection
    match /conversations/{conversationId} {
      allow read: if request.auth != null;

      allow create: if request.auth != null && 
          request.resource.data.participants.hasAny([request.auth.uid]) &&
          request.resource.data.keys().hasAll(['participants', 'postId']) &&
          request.resource.data.participants.size() == 2;

      allow update: if request.auth != null && 
          resource.data.participants.hasAny([request.auth.uid]);

      allow delete: if request.auth != null &&
          resource.data.participants.hasAny([request.auth.uid]);

      match /messages/{messageId} {
        allow read: if request.auth != null && isParticipant(conversationId);
        
        allow create: if request.auth != null && 
            isParticipant(conversationId) &&
            request.resource.data.senderId == request.auth.uid &&
            request.resource.data.keys().hasAll(['senderId', 'timestamp']);

        allow update: if request.auth != null && isParticipant(conversationId);

        match /reactions/{reactionId} {
          allow read, write: if request.auth != null && isParticipant(conversationId);
        }
      }
    }

    // Users Collection
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == userId;
      allow update: if request.auth != null && (
        request.auth.uid == userId || 
        isAdmin() ||
        (isAdmin() && request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['isProvider', 'providerStatus']))
      );
      allow delete: if isAdmin();

      match /notifications/{notificationId} {
        allow read: if request.auth != null && request.auth.uid == userId;
        
        allow create: if request.auth != null && (
          request.auth.uid == userId || 
          isAdmin() ||
          (request.resource.data.type == 'message' && 
           request.resource.data.data.senderId == request.auth.uid) ||
          (request.resource.data.type == 'marketplace' && isAdmin()) ||
          (request.resource.data.type == 'provider_status' && isAdmin())
        );
        
        allow update: if request.auth != null && (
          (request.auth.uid == userId && 
           request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read'])) ||
          isAdmin()
        );
        
        allow delete: if request.auth != null && 
          (request.auth.uid == userId || isAdmin());
      }

      match /favoris/{documentId} {
        allow read, write: if request.auth != null && 
          (request.auth.uid == userId || isAdmin());
      }
    }

    // Marketplace Collection
    match /marketplace/{postId} {
      allow read: if request.auth != null;
      
      allow create: if request.auth != null &&
          request.resource.data.userId == request.auth.uid &&
          request.resource.data.keys().hasAll(['title', 'description', 'price', 'userId', 'isValidated']);
      
      allow update: if request.auth != null && (
          resource.data.userId == request.auth.uid || 
          isAdmin()
      );
      
      allow delete: if request.auth != null && (
          resource.data.userId == request.auth.uid ||
          isAdmin()
      );
    }
  }
}